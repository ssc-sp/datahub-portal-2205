@inject ILogger<ProjectAccessRequestTable> _logger
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory

<AeCard style="min-width: 1200px;">
    <Header>
        <AeTypography Variant="h2">@Localizer["Registration Requests"]</AeTypography>
    </Header>
    <ChildContent>
        @if (_registrationRequests != null)
        {
            <AePaginatedTable
                Headers="@LocalizeHeaders(_headers)"
                Accessors="@_accessorFunctions"
                Dataset="@_registrationRequests"
                Renderers="@_renderFunctions"
                @ref="@_tableRef"
                GridTemplateColumns="1fr 1fr 1fr 150px 120px 120px 120px 150px"
                Page="@_currentPage"
                PageSize="@PageSize"/>

            @if (_tableRef != null)
            {
                <AePagination Pageable="@_tableRef" OnPageClick="PaginationClicked">
                    <LeftIcon>
                        <i class='fad fa-chevron-double-left'></i>
                    </LeftIcon>
                    <RightIcon>
                        <i class='fad fa-chevron-double-right'></i>
                    </RightIcon>
                </AePagination>
            }
        }
        else
        {
            <div>@Localizer["Loading data..."]</div>
        }
    </ChildContent>
</AeCard>

@code {

    [Parameter]
    public int PageSize { get; set; } = 10;

    private List<Datahub_Registration_Request> _registrationRequests;

    private List<Func<Datahub_Registration_Request, string>> _accessorFunctions = new()
    {
        r => r.Email,
        r => r.ProjectName,
        r => r.DepartmentName,
        r => r.ProjectAcronym,
        r => r.CreatedAt?.ToShortDateString(),
        r => r.UpdatedAt?.ToShortDateString(),
        r => r.Status,
        _ => ".."
    };

    private List<Func<Datahub_Registration_Request, RenderFragment>> _renderFunctions;
    
    
    
    private List<string> _headers = new()
    {
        "Email", "Project Name", "Department Name", "Project Acronym", "Created At", "Updated At", "Status", "Actions"
    };
    private IPageableComponent _tableRef;
    private int _currentPage = 0;
    private List<string> LocalizeHeaders(List<string> input) => input
        .Select(s => Localizer[s].ToString())
        .ToList();
    private void PaginationClicked(int pageIndex) => _currentPage = pageIndex;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var context = await _dbFactory.CreateDbContextAsync();

        _registrationRequests = await context.Registration_Requests
            .ToListAsync();

        _renderFunctions = new List<Func<Datahub_Registration_Request, RenderFragment>>
        {
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            datahubRegistrationRequest => @<RegistrationActions RegistrationRequest="@datahubRegistrationRequest" />
        };
    }




}