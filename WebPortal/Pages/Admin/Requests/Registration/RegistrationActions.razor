@inject RegistrationService _registrationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory


<div class="registration-actions">
    @switch (RegistrationRequest.Status)
    {
        case Datahub_Registration_Request.STATUS_REQUESTED:
            if (!_isValid)
            {
                <AeTypography>Invalid Request</AeTypography>                
            }
            else if (_isCreated)
            {
                <AeButton>
                    <i class="fas fa-plus"></i>
                    Create User
                </AeButton>    
            }
            else
            {
                <AeButton>
                    <i class="fas fa-plus"></i>
                    Create Project
                </AeButton>    
            }
            break;
        case Datahub_Registration_Request.STATUS_APPROVED:
            <AeTypography>
                <i class="fas fa-check"></i>
                Approved
            </AeTypography>
            break;
        default:
            <AeTypography>Unrecognized Status</AeTypography>
            break;
    }
</div>

@code {

    [Parameter]
    public Datahub_Registration_Request RegistrationRequest { get; set; }


    private bool _isValid = false;
    private bool _isCreated = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var dbContext = await _dbFactory.CreateDbContextAsync();
        

        if (RegistrationRequest.Status == Datahub_Registration_Request.STATUS_REQUESTED)
        {
            _isValid = await _registrationService.IsValidRegistrationRequest(RegistrationRequest);
            _isCreated = await dbContext.Projects
                .AnyAsync(p => p.Project_Acronym_CD == RegistrationRequest.ProjectAcronym);
        }
    }
}